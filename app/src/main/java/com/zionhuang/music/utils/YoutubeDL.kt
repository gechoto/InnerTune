package com.zionhuang.music.utils

import android.content.Context
import androidx.media3.common.PlaybackException
import com.yausername.youtubedl_android.YoutubeDL
import com.yausername.youtubedl_android.YoutubeDLRequest
import com.zionhuang.innertube.utils.parseCookieString
import com.zionhuang.music.R
import java.io.BufferedWriter
import java.io.File
import java.io.FileWriter
import kotlin.runCatching

class YoutubeDL {
    companion object {
        private lateinit var appContext: Context
        private lateinit var cookiesFile: File

        fun init (context: Context) {
            this.appContext = context
            YoutubeDL.getInstance().init(this.appContext)
            this.cookiesFile = File(this.appContext.cacheDir.absolutePath, "cookies.txt")
        }

        fun update () {
            YoutubeDL.getInstance().updateYoutubeDL(this.appContext, updateChannel = YoutubeDL.UpdateChannel._STABLE)
        }

        fun getStreamUrl(videoId: String, itag: Int, withLogin: Boolean = false): String {
            if (withLogin && !cookiesFile.exists()) {
                throw IllegalStateException("cookies missing")
            }

            runCatching {
                val request = YoutubeDLRequest("https://music.youtube.com/watch?v=$videoId")

                val client: String = if (withLogin) "web_creator" else "ios"
                request.addOption("--extractor-args", "youtube:player_client=$client")

                if (withLogin) {
                    request.addOption("--cookies", this.cookiesFile.absolutePath)
                }

                request.addOption("--skip-download")
                request.addOption("--no-warnings")
                request.addOption("--format", itag)
                request.addOption("--print", "url")

                // this options should never be added during normal usage of the app - enable this only while debugging !!!
                // request.addOption("--no-check-certificate")

                val streamUrl = YoutubeDL.getInstance().execute(request).out
                return streamUrl
            }.getOrElse { throwable ->
                // TODO: handle ytdl errors and display more precise error messages to the user
//                when (throwable) {
//                    // ...
//                }
                throw PlaybackException(this.appContext.getString(R.string.error_unknown), throwable, PlaybackException.ERROR_CODE_REMOTE_ERROR)
            }
        }

        fun saveCookies(
            cookieStr: String?,
        ) {
            if (cookieStr == null) {
                this.cookiesFile.delete()
            } else {
                val domain = ".youtube.com"
                val path = "/"
                val secure = false // TODO: check if this can be set to true
                val expiration = 0

                val cookies: Map<String, String> = parseCookieString(cookieStr)

                BufferedWriter(FileWriter(this.cookiesFile)).use { writer ->
                    writer.write("# Netscape HTTP Cookie File\n")
                    writer.write("# This file is generated by an Android app\n")
                    writer.write("#\n")
                    writer.write("# This file is formatted for Netscape's cookie format\n")

                    val domainFlag = if (domain.startsWith(".")) "TRUE" else "FALSE"
                    val secureFlag = if (secure) "TRUE" else "FALSE"
                    for ((key, value) in cookies) {
                        writer.write("$domain\t$domainFlag\t$path\t$secureFlag\t$expiration\t$key\t$value\n")
                    }
                }
            }
        }
    }
}